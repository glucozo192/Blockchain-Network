// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: block.sql

package models

import (
	"context"

	"github.com/lib/pq"
)

const createBlock = `-- name: CreateBlock :exec
INSERT INTO
    blocks (id, data)
VALUES
    ($1, $2) RETURNING id, data, height, created_at, updated_at, deleted_at
`

type CreateBlockParams struct {
	ID   string  `db:"id" json:"id"`
	Data []int32 `db:"data" json:"data"`
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) error {
	_, err := q.db.ExecContext(ctx, createBlock, arg.ID, pq.Array(arg.Data))
	return err
}

const getAllBlock = `-- name: GetAllBlock :many
SELECT
    id, data, height, created_at, updated_at, deleted_at
FROM
    blocks
ORDER BY
    height DESC
`

func (q *Queries) GetAllBlock(ctx context.Context) ([]*Block, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlock)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Block
	for rows.Next() {
		var i Block
		if err := rows.Scan(
			&i.ID,
			pq.Array(&i.Data),
			&i.Height,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
