// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: node.sql

package models

import (
	"context"
)

const createNode = `-- name: CreateNode :exec
INSERT INTO
  nodes (id, address)
VALUES
  ($1, $2) RETURNING id, address, created_at, updated_at, deleted_at
`

type CreateNodeParams struct {
	ID      string `db:"id" json:"id"`
	Address string `db:"address" json:"address"`
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) error {
	_, err := q.db.ExecContext(ctx, createNode, arg.ID, arg.Address)
	return err
}

const getAll = `-- name: GetAll :many
SELECT
  id, address, created_at, updated_at, deleted_at
FROM
  nodes
`

func (q *Queries) GetAll(ctx context.Context) ([]*Node, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomNode = `-- name: GetRandomNode :many
SELECT
  id, address, created_at, updated_at, deleted_at
FROM
  nodes
ORDER BY
  RANDOM()
LIMIT
  $1
`

func (q *Queries) GetRandomNode(ctx context.Context, limit int32) ([]*Node, error) {
	rows, err := q.db.QueryContext(ctx, getRandomNode, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
